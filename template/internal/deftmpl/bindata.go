// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x3b\x6b\x6f\xdb\xb6\xda\xdf\xf5\x2b\x9e\x69\x78\xb1\x06\xb0\x2c\x27\xdd\x8a\xc5\xb1\xf3\xc2\x75\x94\x46\x38\x8e\x1c\xc8\x4a\xbb\x62\x18\x06\x5a\xa2\x6d\xb6\x12\xa9\x91\x54\x2e\xcb\xfc\xdf\x0f\x48\xc9\x17\xd9\x72\xe2\xe4\x74\x89\xcf\x59\x12\xb4\x91\x28\x3e\xf7\x2b\x45\xea\xee\x0e\x22\x3c\x22\x14\x83\xf9\xfb\xef\x28\xc6\x5c\x26\x88\xa2\x31\xe6\x26\x4c\xa7\x1d\x75\x7f\x9e\xdf\xdf\xdd\x01\xa6\x11\x4c\xa7\xc6\x46\x90\x4b\xbf\xa7\xa0\xee\xee\xa0\xee\xdc\x48\xcc\x29\x8a\x2f\xfd\x1e\x4c\xa7\xf6\xf7\xb6\x9e\x27\xfe\x9f\xe3\x10\x93\x2b\xcc\xdb\x6a\x92\x5f\xdc\xe4\x30\x05\xf6\x32\x7a\x91\x0d\xbf\xe0\x50\x2a\xb4\xbf\x2a\x90\x81\x44\x32\x13\xf0\x17\x48\x76\x99\xa6\x33\x50\x32\x02\xfc\xc7\xfc\xa1\x39\x22\x9c\xd0\xb1\x82\x69\x2a\x18\x2d\x85\xa8\x9f\xea\x51\xf8\x0b\x62\x4c\x97\x29\xfe\x06\x6a\xd2\x07\xce\xb2\xb4\x87\x86\x38\x16\xf5\x01\xe3\x12\x47\x17\x88\x70\x51\xff\x88\xe2\x0c\x2b\x82\x5f\x18\xa1\x60\x82\xc2\x0a\x39\xc9\xb1\x84\x37\x0a\x57\xbd\xcb\x92\x84\xd1\x1c\x78\xaf\x18\x5b\xc2\xb7\x07\xd3\xe9\x9b\xbb\x3b\xb8\x26\x72\x52\x9e\x5c\xf7\x71\xc2\xae\x70\x99\xba\x87\x12\x2c\x0a\x35\x56\x51\x9f\x33\xbe\x37\xbf\xda\x60\x9b\x08\x8b\x90\x93\x54\x12\x46\xcd\x7b\x74\x2c\xf1\x8d\xcc\xed\xf8\x7b\x4c\x84\x2c\xa6\x72\x44\xc7\x18\xea\x30\x9d\xe6\x7c\x35\x8d\xc5\xe0\xba\x9e\x94\x56\x2c\xad\x48\xc5\xbe\xba\x6b\xc3\x5c\x80\x82\xb1\x9c\x78\x87\x52\x26\x91\xe2\xa9\x84\x72\x69\xf8\x69\x78\x07\x2c\xe3\x21\x6e\xe6\xc6\xc4\x14\x73\x24\x19\xcf\xdd\xcf\xa8\x50\x54\x49\x07\x22\x46\xe1\xd7\x7a\x84\x47\x28\x8b\x65\x5d\x12\x19\xe3\x42\x0b\x12\x27\x69\x8c\x64\xd9\x17\xeb\x9b\x54\x5e\xc6\x93\x09\x15\x02\x49\x15\xaa\x72\xa0\x6d\x89\x6f\x84\xe2\x78\x88\xc2\xaf\x6b\xf8\x2a\xd9\x57\x48\xe1\x2f\x78\x68\x62\x4c\xe8\xd7\xad\x39\x48\x39\x56\xce\x62\x6e\x37\x7b\x09\xff\xbd\x0a\xd0\x69\x63\x4b\x0e\x48\xc8\x28\x4e\xd8\x17\xb2\x25\x0f\x6a\x7e\xc6\xe3\x6d\x39\x5e\x13\xae\xe4\x26\x13\x92\x86\x13\x24\x17\x06\xe1\x2c\x79\xba\x71\x57\xb1\x25\x58\x08\x34\x7e\x84\xe3\x95\x78\x4b\x15\xb5\x28\x93\xb7\x73\x7c\xeb\xd1\xff\x38\x67\x5e\xc7\x18\xc6\x04\x53\xf9\x74\x89\x37\x61\x5c\xd4\x8d\xa7\xb9\xc8\x3a\x5e\x42\x85\x44\x34\xc4\xa2\x02\xef\x5a\xba\xbb\x47\xab\x2c\x15\x63\x4c\x09\x7e\xba\x91\xee\x43\xb6\x6e\xa1\xa2\x3a\x6c\x48\x86\x95\xe5\xc0\x58\x29\x46\xa5\x6a\xb7\x07\x0d\xb0\xa6\x53\x23\x1f\x84\x7c\x50\xa7\xdd\xfb\x35\x52\x2e\x99\x9a\x88\xb5\x24\x51\x05\x3d\x1f\x0b\x16\x5f\xe1\x68\x85\xe2\x6c\x78\x7b\x9a\x33\x88\x35\xaa\xd6\x36\x2a\x15\xba\x0a\x3c\xde\x9b\x4a\x56\xbf\x22\xa1\x64\x9c\xa5\xe2\xb1\x66\x5f\xcd\xb7\x8f\x71\xe2\x75\xa2\x4f\x48\x2f\x25\x31\x70\x82\x48\xbc\xd0\xcc\xa2\x93\x7a\xb4\xe7\x96\x31\xa5\x31\x22\x0f\xa6\x94\xff\x44\x15\x65\x72\x13\x99\xe8\xfc\x6d\xb4\xbe\x3b\xe9\x77\x83\xcf\x17\x0e\xa8\x21\xb8\xb8\x7c\xdf\x73\xbb\x60\x5a\xb6\xfd\xe9\x6d\xd7\xb6\x4f\x82\x13\xf8\xe5\x2c\x38\xef\xc1\x7e\xbd\x01\x01\x47\x54\x10\x15\x42\x28\xb6\x6d\xc7\x33\xc1\x9c\x48\x99\x36\x6d\xfb\xfa\xfa\xba\x7e\xfd\xb6\xce\xf8\xd8\x0e\x7c\xfb\x46\xe1\xda\x57\xc0\xc5\xa5\x25\x97\x20\xeb\x91\x8c\xcc\x63\xa3\xf5\x9d\x65\x19\x03\x79\x1b\x63\x40\x34\x02\x4d\x24\xc2\x9c\x28\x37\x55\x56\x02\x85\x5a\x34\x6d\x7b\x4c\xe4\x24\x1b\xd6\x43\x96\xd8\x4a\x86\x71\x46\x6d\x8d\x0e\x85\x39\x3e\x4b\x8b\x66\xcd\xd4\x22\x0c\xc3\x08\x26\x18\xce\xdd\x00\x7a\x24\xc4\x54\x60\x78\x73\xee\x06\x7b\x86\xd1\x65\xe9\x2d\x27\xe3\x89\x84\x37\xe1\x1e\x1c\x34\xf6\x7f\x84\xf3\x1c\xa3\x61\x5c\x60\x9e\x10\x21\x08\xa3\x40\x04\x4c\x30\xc7\xc3\x5b\x18\x73\x44\x25\x8e\x6a\x30\xe2\x18\x03\x1b\x41\x38\x41\x7c\x8c\x6b\x20\x19\x20\x7a\x0b\x29\xe6\x82\x51\x60\x43\x89\x08\x55\x51\x8d\x20\x64\xe9\xad\xc1\x46\x20\x27\x44\x80\x60\x23\x79\x8d\x78\x2e\x21\x12\x82\x85\x04\x49\x1c\x41\xc4\xc2\x2c\xc1\x34\x4f\x47\x30\x22\x31\x16\xf0\x46\x4e\x30\x98\x83\x02\xc2\xdc\xd3\x44\x22\x8c\x62\x83\x50\x50\xcf\x66\x8f\x74\xcf\xcb\x32\x09\x1c\x0b\xc9\x89\xd6\x42\x0d\x08\x0d\xe3\x2c\x52\x3c\xcc\x1e\xc7\x24\x21\x05\x05\x05\xae\x05\x17\x86\x64\x90\x09\x5c\xd3\x7c\xd6\x20\x61\x11\x19\xa9\xbf\x58\x8b\x95\x66\xc3\x98\x88\x49\x0d\x22\xa2\x50\x0f\x33\x89\x6b\x20\xd4\xa0\xd6\x63\x4d\xc9\x61\x33\x0e\x02\xc7\xb1\x11\xb2\x94\x60\x01\x5a\xd6\x05\x77\x7a\x8e\x62\x3d\x55\x0a\x95\x85\x8a\x84\x1a\xb9\x9e\xb0\xa4\x2c\x09\x11\xc6\x28\xe3\x94\x88\x09\xd6\x30\x11\x03\xc1\x34\x45\xe5\xf4\x6a\x44\x4d\x1f\xb1\x38\x66\xd7\x4a\xb4\x90\xd1\x88\x14\x6d\xae\x36\x32\x1a\xaa\x56\x3f\x9c\xdb\x95\x32\x49\xc2\x5c\xdd\xda\x00\xe9\xc2\xaa\xc5\x23\x31\x41\x71\x0c\x43\x5c\x28\x0c\x47\x40\x28\xa0\x25\x71\xb8\x22\xaf\x2a\x9d\x24\x28\x86\x94\x71\x4d\x6f\x55\xcc\xba\x61\x04\x67\x0e\x0c\xfa\xa7\xc1\xa7\x8e\xef\x80\x3b\x80\x0b\xbf\xff\xd1\x3d\x71\x4e\xc0\xec\x0c\xc0\x1d\x98\x35\xf8\xe4\x06\x67\xfd\xcb\x00\x3e\x75\x7c\xbf\xe3\x05\x9f\xa1\x7f\x0a\x1d\xef\x33\xfc\xcb\xf5\x4e\x6a\xe0\xfc\x72\xe1\x3b\x83\x01\xf4\x7d\xc3\x3d\xbf\xe8\xb9\xce\x49\x0d\x5c\xaf\xdb\xbb\x3c\x71\xbd\x0f\xf0\xfe\x32\x00\xaf\x1f\x40\xcf\x3d\x77\x03\xe7\x04\x82\x3e\x28\x82\x05\x2a\xd7\x19\x28\x64\xe7\x8e\xdf\x3d\xeb\x78\x41\xe7\xbd\xdb\x73\x83\xcf\x35\xe3\xd4\x0d\x3c\x85\xf3\xb4\xef\x43\x07\x2e\x3a\x7e\xe0\x76\x2f\x7b\x1d\x1f\x2e\x2e\xfd\x8b\xfe\xc0\x81\x8e\x77\x02\x5e\xdf\x73\xbd\x53\xdf\xf5\x3e\x38\xe7\x8e\x17\xd4\xc1\xf5\xc0\xeb\x83\xf3\xd1\xf1\x02\x18\x9c\x75\x7a\x3d\x45\xca\xe8\x5c\x06\x67\x7d\x5f\xf1\x07\xdd\xfe\xc5\x67\xdf\xfd\x70\x16\xc0\x59\xbf\x77\xe2\xf8\x03\x78\xef\x40\xcf\xed\xbc\xef\x39\x39\x29\xef\x33\x74\x7b\x1d\xf7\xbc\x06\x27\x9d\xf3\xce\x07\x47\x43\xf5\x83\x33\xc7\x37\xd4\xb4\x9c\x3b\xf8\x74\xe6\xa8\x21\x45\xaf\xe3\x41\xa7\x1b\xb8\x7d\x4f\x89\xd1\xed\x7b\x81\xdf\xe9\x06\x35\x08\xfa\x7e\x30\x07\xfd\xe4\x0e\x9c\x1a\x74\x7c\x77\xa0\x14\x72\xea\xf7\xcf\x6b\x86\x52\x67\xff\x54\x4d\x71\x3d\x05\xe7\x39\x39\x16\xa5\x6a\x28\x59\xa4\xef\xeb\xfb\xcb\x81\x33\x47\x08\x27\x4e\xa7\xe7\x7a\x1f\x06\x0a\x58\x89\x38\x9b\x5c\x37\x2c\xeb\xd8\x68\xe9\x14\x78\x93\xc4\x54\xb4\x2b\x12\xdb\xfe\xe1\xe1\x61\x9e\xcf\xcc\xed\x26\x09\x95\xdc\xda\xe6\x88\x51\x69\x8d\x50\x42\xe2\xdb\x26\xfc\x70\x86\xe3\x2b\x2c\x49\x88\xc0\xc3\x19\xfe\xa1\x06\xf3\x81\x1a\x74\x38\x41\x71\x0d\x04\xa2\xc2\x12\x98\x93\xd1\x11\x0c\xd9\x8d\x25\xc8\x9f\xaa\xc3\x80\x21\xe3\x11\xe6\xd6\x90\xdd\x1c\x81\x46\x2a\xc8\x9f\xb8\x09\xfb\x3f\xa6\x37\x47\x90\x20\x3e\x26\xb4\x09\x8d\x23\x95\x5b\x27\x18\x45\x2f\x49\x3f\xc1\x12\x81\x5a\xa7\xb5\xcd\x2b\x82\xaf\x55\x14\x99\x2a\x7a\x25\xa6\xb2\x6d\x5e\x93\x48\x4e\xda\x11\xbe\x22\x21\xb6\xf4\xcd\xcb\x29\x0b\xec\x19\xbb\xca\x98\x16\xfe\x23\x23\x57\x6d\xb3\x9b\xb3\x6a\x05\xb7\x29\x5e\x62\x5c\x35\x58\xb6\x32\xee\x91\xae\x04\x02\xcb\xf6\x65\x70\x6a\xfd\xfc\xc2\xec\xeb\x45\xe1\xcb\x99\xfb\xbe\x96\xa5\x65\x6b\xe6\x8e\x0d\xa3\x65\x2b\xa7\x54\x17\x43\x16\xdd\x02\x91\x38\x11\x21\x4b\x71\xdb\x34\xf5\x8d\xbc\x55\xd7\x45\x44\x89\x70\x82\x13\xa4\x23\xca\x51\xd5\xfd\x7c\xd6\x2b\x3e\xab\x90\xd6\x35\x1e\x7e\x25\xd2\xca\x1f\x24\x8c\xc9\x89\x06\xca\x6b\x03\x41\x02\x47\x8b\x49\xca\x37\x34\xb4\x85\xa2\x2f\x99\x90\x4d\xa0\x8c\xe2\x23\x98\x60\x55\x99\x9a\xb0\xdf\x68\xfc\xdf\x11\xc4\x84\x62\x6b\x3e\x54\x7f\x87\x93\x23\xd0\x11\x90\x4f\x80\xef\x48\xa2\x82\x05\x51\x79\x04\x43\x14\x7e\x1d\x73\x96\xd1\xc8\x0a\x59\xcc\x78\x13\xbe\x1f\xbd\x53\xbf\xcb\xea\x87\x14\x45\x91\xe6\x4a\x79\xc3\x70\xac\x67\xb6\xcd\x62\xa6\xa9\xf4\x2d\xd1\xf0\xb9\xdd\x63\x49\xa4\x2d\xe5\xa8\xe4\x1d\xa0\x25\xf9\x0b\xe6\x31\x00\xc5\xc1\x33\x67\xd2\x2b\xcc\x15\x92\xd8\x42\x31\x19\xd3\x26\x48\x96\x96\x15\x75\xa5\x1f\xb4\x4d\xc9\x52\xf3\xb8\x65\xcb\x68\xc1\x68\x9e\x59\xcd\x77\x8d\xc6\x33\x87\x4a\x25\xd3\x11\x11\x69\x8c\x6e\x9b\x30\x8c\x59\xf8\xb5\xe4\xdb\x09\xba\xb1\x0a\x27\x79\xd7\x68\xa4\x37\xa5\x87\x61\x8c\x11\x57\x04\xe5\xa4\x34\xbe\x29\x50\xe6\xca\x01\x94\x49\xb6\x12\x12\x25\x6d\x69\x45\x01\xb4\x22\x72\xf5\xdc\x6e\x55\x96\x77\x55\x39\xf7\x0b\x31\xe3\x5b\x19\x59\x07\x73\x61\x67\xa5\x09\x13\x42\x1c\xc7\xc5\xec\xb6\xd9\xc8\xef\x45\x8a\xc2\xd9\xfd\xb3\x0a\x5a\x3c\xe4\x28\x22\x99\x68\xc2\x5b\x3d\x56\x91\x00\x46\xa3\x52\x16\xcb\xc1\x9a\xb0\x9f\xde\x80\x60\x31\x89\xe0\x7b\x7c\xa8\x7e\xcb\x89\x61\x34\x5a\xd2\xc5\x2e\x64\x87\x05\x27\xcf\x97\x25\xde\x6d\x0c\xb8\x92\x76\x35\xc8\x75\x51\x6a\x7e\x6a\x34\x8e\x40\x97\xa8\x62\x7e\x88\xa9\xc4\xbc\xca\x5e\xfa\x5f\x43\x1b\x65\xdd\x6e\xce\xbb\x9f\x0e\x0e\xba\xd5\x05\xe8\x40\xf9\xb5\x09\x45\xbc\xe5\x04\x96\xad\x97\xc3\x56\x47\xe4\xec\x67\xb1\xb7\x34\xdf\x54\x02\xfd\x92\xa3\xf2\x0d\xd9\x1e\xec\xc3\x74\x2a\xe6\x2f\x3c\x60\xc4\x38\x2c\xf6\x3f\x36\xec\x3f\xc1\x74\xba\x42\x15\x96\x77\x43\xda\xa5\xbd\x90\xb5\x69\xc5\xab\x95\x92\xf1\xe7\x39\x78\x7e\xcf\x5f\xdd\x74\x9b\x62\xb6\x70\x9e\xfd\xdc\x79\xee\xf3\x8d\x9d\xcf\x7d\x1b\xd5\xbe\x5b\x4e\xb0\xeb\xae\xd0\x80\xc6\x2c\x97\xdc\xe7\x0e\x85\x18\x08\x26\x1c\x8f\xda\xe6\x36\x6f\x46\x9f\xd9\x1f\x66\x49\xf3\xf4\xf4\xb4\x48\xbe\x11\x0e\x19\xd7\xef\xe4\x66\xcb\x83\xd2\x82\xe0\x40\x2d\x07\x4a\x79\x7b\xc8\xe2\xa8\x3a\x71\x87\x19\x17\x0a\x7b\xca\x48\x3e\x30\x6f\x28\x08\xd5\x48\x8b\xbe\x62\x25\xc1\xff\xa4\x18\xd3\xf8\xf4\x4b\xd4\x11\xe3\x49\x13\x42\x94\x12\x89\x62\xf2\x27\xae\x4c\xfa\x6f\x7f\xfc\x19\x47\xa8\xa2\x5e\xaf\xcd\x28\x86\xb5\x96\x9b\x79\x21\x9f\x0f\xce\xbb\xb7\xf4\xa6\x30\xef\xf1\x47\x82\xaf\x81\xd0\xfb\xde\x6a\xcf\x96\x91\xa8\xd2\x87\x57\x12\x6f\x75\xfa\xcd\x7f\x1e\xda\xd2\xa9\x28\x0a\xaf\x21\xfb\xf7\x84\xac\x90\x9c\xd1\xf1\xcb\xa9\xf6\xd7\xcd\x27\x58\x7e\x2b\xf6\xf3\x5a\x76\xce\xe4\x37\xf0\xba\x8a\x86\xa1\x78\x32\x3b\xa6\xb1\xba\x31\xf8\xea\x87\xff\x0c\x3f\xcc\x5b\xd3\xb9\xab\xb5\x86\x2f\x67\x66\xb0\xab\x75\xf4\xc0\xf9\xa4\xcd\x87\x88\x5e\x58\x98\xcd\x71\x07\x15\xb5\x60\x71\x34\x20\xaf\x04\x2f\xee\x19\x4b\x1c\xed\x8a\x7b\x3c\xa8\xd1\x07\x0f\x9d\xfd\x97\x3a\xcb\x72\x87\xb9\x7a\x0a\xee\x85\x1a\xca\x59\xbb\xb5\xd6\x53\x66\x34\xc2\x5c\x75\x7f\x65\x77\xca\xcf\xf1\xa9\x26\x6a\xf7\x72\xcc\xd3\xaa\xe9\x96\xed\xdd\xf2\x09\x9a\x4a\xf3\xbe\x76\x85\x3b\x53\x8d\x77\xce\x33\x01\x5a\x93\x1d\xe4\x69\xe7\xf4\xf4\x98\x08\xbe\xaf\x23\x7e\x0d\xac\xff\xcd\x36\x77\x79\xb9\x35\x3f\x89\xb8\x58\x70\xcd\x86\x5e\x60\xc9\xb5\x7c\x2e\xf2\xd5\x1b\xff\x19\xde\xf8\xba\xe8\x7a\x5d\x74\xbd\x2e\xba\x76\xdd\x59\x5e\x17\x5d\x3b\xd3\xb2\x6d\x32\x54\xcb\xd6\xfb\x71\xc7\x8f\xd8\x0a\x9d\x83\x2c\x46\x9e\xfd\x24\x46\xe9\x68\xd2\xd2\x49\x93\x85\xa1\x0f\x0f\x0f\xef\xdb\xe0\x2e\xef\xec\xae\x6f\x49\xee\x46\xd3\xb0\x4b\xed\xcb\x73\xb6\x2e\x07\x1b\x5b\x97\xca\x4d\xb4\x87\x4c\xbe\xd4\xdb\xac\x9c\x6b\x28\x9f\xc2\x5a\x4e\x57\xe5\xef\x74\x9f\xcf\x21\x0e\x96\xb3\x95\x96\x68\xeb\x54\x85\xa9\x84\xe1\xed\x76\xfb\x70\xeb\xb9\x63\xed\xbc\xc3\x6a\x66\x68\xd9\x11\xb9\x3a\xce\xff\x37\xca\x69\x62\xd7\xda\xda\x0d\xc7\xeb\x72\x11\x17\xf9\xab\x65\x0f\x59\x74\xab\x46\x26\x32\x89\x8f\x0d\xa3\xfa\x43\xe0\x34\x13\x13\x76\x85\xf9\x37\xf8\x0e\x76\x0d\x55\xf9\xfb\xa9\xbf\xe3\x2b\xb7\x6f\xf3\x91\xdb\xf6\xdf\xb8\x7d\xbb\x4f\xdc\x96\x68\x6e\xa1\xc9\xc5\xc7\xac\x8f\xf8\xb6\xea\xdf\x01\x00\x00\xff\xff\x79\xae\xec\x55\xe5\x3f\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 16357, mode: os.FileMode(420), modTime: time.Unix(1488730542, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

